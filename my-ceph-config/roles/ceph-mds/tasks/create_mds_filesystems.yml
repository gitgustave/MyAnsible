---
- import_role:
    name: ceph-facts
    tasks_from: get_def_crush_rule_name.yml

- name: gather osd device classes
  shell: ceph osd df --format json | jq -r '.nodes | .[].device_class'
  delegate_to: "{{ groups[mon_group_name][0] }}"
  register: osd_device_class_list

- name: create filesystem pools non hybrid cluster only
  when:
    - '("hdd" in osd_device_class_list.stdout_lines and "ssd" not in osd_device_class_list.stdout_lines) or ("ssd" in osd_device_class_list.stdout_lines and "hdd" not in osd_device_class_list.stdout_lines)'
  block:
    - name: create filesystem pools non hybrid cluster only
      ceph_pool:
        name: "{{ item.name }}"
        cluster: "{{ cluster }}"
        pg_num: "{{ item.pg_num | default(omit) }}"
        pgp_num: "{{ item.pgp_num | default(omit) }}"
        size: "{{ item.size | default(omit) }}"
        min_size: "{{ item.min_size | default(omit) }}"
        pool_type: "{{ item.type | default('replicated') }}"
        rule_name: "{{ ceph_osd_pool_default_crush_rule_name | default(omit) }}"
        erasure_profile: "{{ item.erasure_profile | default(omit) }}"
        pg_autoscale_mode: "{{ item.pg_autoscale_mode | default(omit) }}"
        target_size_ratio: "{{ item.target_size_ratio | default(omit) }}"
      with_items: "{{ cephfs_pools }}"
      delegate_to: "{{ groups[mon_group_name][0] }}"
      environment:
        CEPH_CONTAINER_IMAGE: "{{ ceph_docker_registry + '/' + ceph_docker_image + ':' + ceph_docker_image_tag if containerized_deployment else None }}"
        CEPH_CONTAINER_BINARY: "{{ container_binary }}"

- name: create filesystem pools hybrid cluster only
  when:
    - '"hdd" in osd_device_class_list.stdout_lines'
    - '"ssd" in osd_device_class_list.stdout_lines'
  block:
    - name: create filesystem data pool hybrid cluster only
      ceph_pool:
        name: "{{ item.name }}"
        cluster: "{{ cluster }}"
        pg_num: "{{ item.pg_num | default(omit) }}"
        pgp_num: "{{ item.pgp_num | default(omit) }}"
        size: "{{ item.size | default(omit) }}"
        min_size: "{{ item.min_size | default(omit) }}"
        pool_type: "{{ item.type | default('replicated') }}"
        rule_name: "{{ ceph_osd_pool_default_crush_rule_name | default(omit) }}"
        erasure_profile: "{{ item.erasure_profile | default(omit) }}"
        pg_autoscale_mode: "{{ item.pg_autoscale_mode | default(omit) }}"
        target_size_ratio: "{{ item.target_size_ratio | default(omit) }}"
      delegate_to: "{{ groups[mon_group_name][0] }}"
      with_items:
        - "{{ cephfs_data_pool }}"
      environment:
        CEPH_CONTAINER_IMAGE: "{{ ceph_docker_registry + '/' + ceph_docker_image + ':' + ceph_docker_image_tag if containerized_deployment else None }}"
        CEPH_CONTAINER_BINARY: "{{ container_binary }}"

    - name: create filesystem metadata pool hybrid cluster only
      ceph_pool:
        name: "{{ item.name }}"
        cluster: "{{ cluster }}"
        pg_num: "{{ item.pg_num | default(omit) }}"
        pgp_num: "{{ item.pgp_num | default(omit) }}"
        size: "{{ item.size | default(omit) }}"
        min_size: "{{ item.min_size | default(omit) }}"
        pool_type: "{{ item.type | default('replicated') }}"
        rule_name: "replicated_ssd"
        erasure_profile: "{{ item.erasure_profile | default(omit) }}"
        pg_autoscale_mode: "{{ item.pg_autoscale_mode | default(omit) }}"
        target_size_ratio: "{{ item.target_size_ratio | default(omit) }}"
      delegate_to: "{{ groups[mon_group_name][0] }}"
      with_items:
        - "{{ cephfs_metadata_pool }}"
      environment:
        CEPH_CONTAINER_IMAGE: "{{ ceph_docker_registry + '/' + ceph_docker_image + ':' + ceph_docker_image_tag if containerized_deployment else None }}"
        CEPH_CONTAINER_BINARY: "{{ container_binary }}"

- name: create ceph filesystem
  ceph_fs:
    name: "{{ cephfs }}"
    cluster: "{{ cluster }}"
    data: "{{ cephfs_data_pool.name }}"
    metadata: "{{ cephfs_metadata_pool.name }}"
    max_mds: "{{ mds_max_mds if not rolling_update | bool else omit }}"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  environment:
    CEPH_CONTAINER_IMAGE: "{{ ceph_docker_registry + '/' + ceph_docker_image + ':' + ceph_docker_image_tag if containerized_deployment | bool else None }}"
    CEPH_CONTAINER_BINARY: "{{ container_binary }}"

- name: set max_file_size
  command: "{{ container_exec_cmd | default('') }} ceph --cluster {{ cluster }} fs set {{ cephfs }} max_file_size {{ mds_max_file_size }}"
  changed_when: false
  delegate_to: "{{ groups[mon_group_name][0] }}"
  when: mds_max_file_size is defined
